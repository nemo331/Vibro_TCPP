#include <stdio.h>           
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include <alloc.h>
#include <sys\stat.h>
#include <time.h>
#include <math.h>
#include <fcntl.h>
#include <dos.h>
#include <io.h>
#include <dir.h>

  int **Nom_kol; //Массив с номерами каналов
  FILE *myfile;
  FILE *basefile;
	char str1[50];
	char str2[50];
        char vremia[18];
  int fl; //Кол-во каналов
  int Number; //Кол-во отсчетов на канал
  float Chastota=1; //Частота опроса АЦП
  unsigned long tc_poz=0;//текущая позиция в файле
  int Nom_bl=0;//Номер блока
  int konec_f=0;
  int far **aRes; //Массив с данными по вибрации в кодах АЦП
  float **Pokaz;
  int kolPok=6;//Кол-во показателей(мин.,макс. вибрация и т.д. )
    float aKof1[]={0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,
		   0.25,0.25,0.25,0.25,0.25,0.25,0.25,};
    float aKof2[]={0.02657878, 0.254065041, 0.026966292, 0.257953568,
                0.026773762, 0.259515571, 0.027548209, 0.265674814,
		0.02608242, 0.247116969, 0.027083145, 0.260642919,
		0.026821157, 0.255362615, 0.02728513, 0.261551874};//БКВ-1 (Выходы на шлейфовый осциллограф)
   float aKof3[]={0.273224044,0.267379679,0.273224044,0.304878049,
		  0.263157895,0.267379679,0.255102041,0.267379679,
		  0.273224044,0.267379679,0.273224044,0.304878049,
		  0.263157895,0.267379679,0.255102041,0.267379679}; //БКВ-2 (Выходы по пост. напряжению на ЭВМ)		 
   float aKof4[]={0.025106703,0.239808153,0.025106703,0.234192037,
		0.025297243,0.235294118,0.02728513,0.265251989,
		0.024431957,0.228832952,0.024956326,0.232018561,
		0.024697456,0.224719101,0.0264527839,0.230946882};//БКВ-2 (Выходы на шлейфовый осциллограф) 
   float aKof[16]={1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
                    1.0,1.0,1.0};
  FILE *datfile;  //Файл с установками для обработки
  //char fdan[40];
 

    char Name_f[15];  //Имя файла
    char n_f_pol[9];  //Имя файла без расширения
    char f_ust[45];   //Имя установочного файла
    char chans[20];  //Каналы
    char frec[10];   //Частота опроса АЦП по одному каналу
    char size[10];   //Размер блока
    char path[35];   //Путь до файла
    char flagVib[2]; //Флаг (Печатать в файл значения вибрации или нет)
    char flagPok[2]; //Флаг (Печатать в файл показатели вибрации или нет)
    char flagVrem[2]; //Флаг (Отсчет времени начинается с НУЛЯ или с текущего времени)
    char flagUdpost[2];//Флаг (Удаление постоянной составляющей)
    char flagBl_f[2];//Флаг (Формировать один блок-файл)
    char flagDat_vr[2];//Флаг(Выдавать в файл дату/время или нет)
    char Nom_nab[3];//Номер набора коэффициентов для преобразования из кодов АЦП
    char flagFour[2];//Флаг(Делать преобразование Фурье)
    char flagFiltr[2];//Флаг(Фильтровать данные?)
    char Nig_f[10];//Нижний порог частоты
    char Verh_f[10];//Верхний порог частоты
      struct stat statbuf;
      struct tm *gmt;      
	int obr_f_dan(void);   // Функция обработки файла установок
	void kol_kan(char* strok, int **mas1); //Функция определения кол-ва каналов и кол-ва их повторений
	void vrem_fun(int pozic, char* vnut_vrem);//Функция преобразования номера позиции в текущее время

    
    float far *vib_dan; //Указатель на массив данных по вибрации
    float far *nGbm;    //Указатель на массив значений частот
    float far *nGbv;    //Указатель на массив значений амплитуд вибрации
    float far *argum;   //Указатель на массив фаз при преобразовании Фурье
    float far *aGv;
    float far *aGm;
    void S_Furie(int,float far *vn_vib,float far *vn_nGbm,float far *vn_nGbv,float far *vn_argum,float far *vn_aGv,float far *vn_aGm);

    FILE *fltfile; //Файл отфильтрованных данных по вибрации
    float f_done;  //Нижняя частота фильтра
    float f_up;    //Верхняя частота фильтра
  void main(int argc,char* argv[])
{
      clrscr();
	printf("\n\t\tПреобразование данных из кодов АЦП \n");
	strcpy(f_ust,"C:\\TC\\WORK2\\setup.txt"); //C:\\TC\\WORK2\\
	int osh=obr_f_dan();
	if(argc==3)
	{ sprintf(f_ust,"C:%sBIN\\%s",path,argv[2]);
          if(strrchr(f_ust,'.')==NULL)
	   {printf("Не указано расширение установочного файла!\n"); return;}
	  osh=obr_f_dan();
        }
	printf("\n\tПроверь файл установок %s !!! \n",f_ust);
	if(osh==0) return;
    printf("\nНаименование обрабатываемого файла [xxxxx]\n");
      int srav=stricmp(Name_f,"");
      if(srav==0) strcpy(Name_f,argv[1]);
    printf("%s\n",Name_f);
      if(strrchr(Name_f,'.')==NULL)
       {printf("Не указано расширение файла!\n"); return;}
	fl=strlen(chans);
         Nom_kol=(int**)calloc(2,sizeof(int*));
         if(Nom_kol==NULL){printf("Out memory\n");return;}
        for(int q=0;q<2;q++)
	 {
	  Nom_kol[q]=(int*)calloc(fl,sizeof(int));
	  if(Nom_kol[q]==NULL){printf("Out memory\n");return;}
	 }

	kol_kan(chans,Nom_kol);

	printf("Кол-во обрабатываемых каналов\n");
	  if(fl<=1||fl>16){fl=1;}
	  printf("%d\n",fl);

	 printf("Кол-во отсчетов замера на каждый канал\n");
           Number=atoi(size);
	   printf("%d\n",Number);

         printf("Частота опроса АЦП на каждый канал\n");
	   Chastota=atof(frec);
	   printf("%.4f\n",Chastota);

          int kk;
	  int Nabor=atoi(Nom_nab);
          switch(Nabor)
	     {
               case 1: for(kk=0;kk<16;kk++)
		       aKof[kk]=aKof1[kk];
		       break;
               case 2: for(kk=0;kk<16;kk++)
		       aKof[kk]=aKof2[kk];
		       break;
               case 3: for(kk=0;kk<16;kk++)
		       aKof[kk]=aKof3[kk];
		       break;
	       case 4: for(kk=0;kk<16;kk++)
		       aKof[kk]=aKof4[kk];
		       break;
	      default: break;
	     }

          sprintf(str1,"c:%sBIN\\%s",path,Name_f);
	    myfile=fopen(str1,"rb");
	    if(myfile==NULL){printf("Не могу открыть файл%35s\n",str1);}

	  strcpy(n_f_pol,Name_f); //Убрать расширение из имени файла
	    int dl=strlen(n_f_pol);
	    dl=dl-4;
            strset(Name_f,'\0');
	    strncpy(Name_f,n_f_pol,dl);

	         stat(str1, &statbuf); //Получить информацию о файле
    //           printf("Размер в байтах: %ld\n", statbuf.st_size);
    //	         printf("Время последнего изменения: %s\n",ctime(&statbuf.st_ctime));
                 gmt=localtime(&statbuf.st_ctime);
    //	         printf("Сек:%d\n",gmt->tm_sec);

  do{      if (kbhit())  { if (getch()==27) return;} //выход по ESC
           Nom_bl=Nom_bl+1;
        if  (stricmp(flagBl_f,"Y")==0)
	    {sprintf(str2,"c:%sOSC\\%s.vrt",path,Name_f);}
	else{sprintf(str2,"c:%sOSC\\%s%d.vrt",path,Name_f,Nom_bl);}
	     printf("%35s\n",str2);
	   basefile=fopen(str2,"wt");
	   if(basefile==NULL){printf("Не могу открыть файл%35s\n",str2);}
	      aRes=(int**)farcalloc(fl,sizeof(int*));
	      if(aRes==NULL){printf("Out memory1\n");return;}
		  for(int qq=0;qq<fl;qq++)
		      {    
		       aRes[qq]=(int*)farcalloc(Number,sizeof(int));
		       if(aRes[qq]==NULL){printf("Out memory2\n");return;}
		       } 
	 unsigned long kolStr=0;//Кол-во строк в dat-файле
       for(int k=0;k<fl;k++)
       {
	 for(int i=0;i<Number;i++)
	 {
	  fseek(myfile,2L*k+2L*fl*(i+tc_poz),SEEK_SET);
	  fread(&aRes[k][i],2,1,myfile);
	  kolStr=kolStr+1;
	  if(feof(myfile)){i=Number;konec_f=1;}
	 }
       }
	Number=kolStr/fl;  //Сколько отсчетов по каждому каналу в исх. файле
			   //столько строк в конечном файле


        for(k=0;k<Number;k++)
       {
	 for(int i=0;i<fl;i++)
         {
	  aRes[i][k]=aRes[i][k]-2048;
	  aRes[i][k]=aRes[i][k]&0xFFFFFFFE;
	 }
       }
	 Pokaz=(float**)calloc(kolPok,sizeof(float*));            //Выделение памяти под показатели
         if(Pokaz==NULL){printf("Out memory3\n");return;}
        for(int qz=0;qz<kolPok;qz++)
	 {
	  Pokaz[qz]=(float*)calloc(fl,sizeof(float));
	  if(Pokaz[qz]==NULL){printf("Out memory4\n");return;}
	 }
          for(k=0;k<fl;k++)     //Нахождение постоянной составляющей по каждому каналу
          { for(int i=0;i<Number;i++)
	    Pokaz[0][k]=(aRes[k][i]*aKof[Nom_kol[0][k]])+Pokaz[0][k];
	    Pokaz[0][k]=(Pokaz[0][k]/Number)/(aKof[Nom_kol[0][k]]); 
	  }
      if(stricmp(flagUdpost,"Y")==0)
	 {for(k=0;k<fl;k++)     //Удаление постоянной составляющей по каждому каналу
	   { for(int i=0;i<Number;i++)
	    aRes[k][i]=aRes[k][i]-Pokaz[0][k];
	   }
	 }
	   for( k=0;k<fl;k++)
	   { Pokaz[0][k]=-1000;
	     Pokaz[2][k]=1000;
	     for(int i=1;i<Number-1;i++)
		 { if(aRes[k][i] > Pokaz[0][k]) Pokaz[1][k]=i;//Номер позиции максимального значения
		   Pokaz[0][k]=(aRes[k][i] > Pokaz[0][k]) ? aRes[k][i]:Pokaz[0][k];//Максим.значение вибрации
		   if(aRes[k][i] < Pokaz[2][k]) Pokaz[3][k]=i;//Номер позиции минимального значения
		   Pokaz[2][k]=(aRes[k][i] < Pokaz[2][k]) ? aRes[k][i]:Pokaz[2][k]; //Миним.значение вибрации
                 }
	   }
	  if(stricmp(flagDat_vr,"Y")==0)
	       {// fprintf(basefile," Дата/время: %s",asctime(gmt));
		 fprintf(basefile," Время: %.2d:%.2d:%.2d\t",gmt->tm_hour,gmt->tm_min,gmt->tm_sec);
		 fprintf(basefile," Дата: %.2d.%.2d.%.4d\n",gmt->tm_mday,(gmt->tm_mon)+1,(gmt->tm_year)+1900);
	       }
	if(stricmp(flagPok,"Y")==0)
	 {  fprintf(basefile," Макс.\t");//Печать максим. значения вибрации
	      for(int oo=0;oo<fl;oo++)
	       fprintf(basefile,"%.2f\t",(Pokaz[0][oo])*aKof[Nom_kol[0][oo]]);
	       fprintf(basefile,"\n");
	     fprintf(basefile," Время\t");//Печать времени максим. значения вибрации
	      for(int o=0;o<fl;o++)           
	       {vrem_fun(Pokaz[1][o],vremia);
		fprintf(basefile,"%s\t",vremia);}
	        fprintf(basefile,"\n");
             fprintf(basefile," Мин.\t");//Печать миним. значения вибрации
	      for(oo=0;oo<fl;oo++)          
	       fprintf(basefile,"%.2f\t",(Pokaz[2][oo])*aKof[Nom_kol[0][oo]]);
		fprintf(basefile,"\n");
	     fprintf(basefile," Время\t");//Печать времени миним. значения вибраци
	      for(o=0;o<fl;o++)
	       {vrem_fun(Pokaz[3][o],vremia);
                fprintf(basefile,"%s\t",vremia);}
		 fprintf(basefile,"\n");
	 }
       if(stricmp(flagVib,"Y")==0)
	{ fprintf(basefile," Время\t"); //Заполнение названий
	  for(int o=0;o<fl;o++)           //каналов над данными
	    fprintf(basefile,"Кан.N%d\t",Nom_kol[0][o]);
	    fprintf(basefile,"\n");
	   for(k=0;k<Number;k++)
	  {  vrem_fun(k,vremia);      //Преобразование номера позиции в текущее время
	     fprintf(basefile,"%s\t",vremia);
	   for(int i=0;i<fl;i++)
	    {
	     if(i==fl-1) fprintf(basefile,"% .2f\n",((float)(aRes[i][k]))*aKof[Nom_kol[0][i]]);
	     else  fprintf(basefile,"% .2f\t",((float)(aRes[i][k]))*aKof[Nom_kol[0][i]]);
	    }
	  }
	}
	    tc_poz=Number+tc_poz; //Увеличение текущей позиции в файле
	 for(qq=0;qq<fl;qq++)
          farfree (aRes[qq]);
	  farfree (aRes);
	 for(qz=0;qz<kolPok;qz++)
          free (Pokaz[qz]);
          free (Pokaz);   
	 fclose(basefile);
    } while(konec_f==0&&(stricmp(flagBl_f,"Y")!=0));//Делать пока не конец
	 //файла или не установлен флаг формирования одного блок-файла
	 fclose(myfile);
   
/**********************************************************************/   
/************************Преобразование Фурье**************************/
/**********************************************************************/
     if(stricmp(flagFour,"Y")==0)
     {  if(stricmp(flagFiltr,"Y")==0)
	{  printf("\tПреобразование Фурье и фильтрация\n");
	   f_done=atof(Nig_f);
	   f_up=atof(Verh_f);
	   printf("Нижняя граница фильтра %6.2f Гц\n",f_done);
	   printf("Верхняя граница фильтра %6.2f Гц\n",f_up);
	}
	else printf("\tПреобразование Фурье\n");
	 int riad=log(Number)*1.442695;//Находим максимально возможное кол-во 
	 Number=pow(2,riad);             //отсчетов для разложения в ряд Фурье
       
           vib_dan=(float*)farcalloc(Number,sizeof(float));
	   if(vib_dan==NULL){printf("Out memory\n");return;}
              nGbm=(float*)farcalloc(Number>>1,sizeof(float));
	      if(nGbm==NULL){printf("Out memory\n");return;}
           nGbv=(float*)farcalloc(Number>>1,sizeof(float));
	   if(nGbv==NULL){printf("Out memory\n");return;}
              argum=(float*)farcalloc(Number>>1,sizeof(float));
	      if(argum==NULL){printf("Out memory\n");return;}
           
       for(int yy=0;yy<fl;yy++)
       {     aGv=(float*)farcalloc(Number,sizeof(float));
	     if(aGv==NULL){printf("Out memory\n");return;}
	         aGm=(float*)farcalloc(Number,sizeof(float));
	         if(aGm==NULL){printf("Out memory\n");return;}
	 
             basefile=fopen(str2,"rt");
	     if(basefile==NULL){printf("Не могу открыть файл%35s\n",str2);}
		sprintf(str1,"c:%sFURIE\\%s.f%02d",path,Name_f,Nom_kol[0][yy]);
		myfile=fopen(str1,"wt");
		if(myfile==NULL){printf("Не могу открыть файл%35s\n",str1);}
		printf("%35s\n",str1);
	     char varus[255];
	     fgets(varus,250,basefile); //Чтение из файла первой строки
	 for(int ii=0;ii<Number;ii++)              //Заполнение массива
	  {  float vsper;                           //данных по вибрации
	       for(int iii=0;iii<fl+1;iii++)
	       { fscanf(basefile,"%f",&vsper);
		 if((iii-1)==yy) vib_dan[ii]=vsper;
	       }                              
	  }
	       //Подпрограмма "Преобразование Фурье"
	       S_Furie(Number,vib_dan,nGbm,nGbv,argum,aGv,aGm);

	       for(int d=0;d<(Number>>1);d++)
	       { fprintf(myfile,"%9.4f \t",nGbm[d]);
	         fprintf(myfile,"%9.4f \t",nGbv[d]);
		 fprintf(myfile,"%9.4f \n",argum[d]*(180/M_PI));
               }
	 fclose(myfile);
	 fclose(basefile); 
	 farfree(aGv);
	 farfree(aGm);
         farfree(vib_dan);
       if(stricmp(flagFiltr,"Y")==0)
	 { 
/*******************************************************************/
/****************Обратное преобразование Фурье и фильтрация*********/
/*******************************************************************/
              
	      for(int flt=0;flt<(Number>>1);flt++)//Фильтрация(обнуление
	      {                                   //значений амплитуд тех
	       if(nGbm[flt]<f_done||nGbm[flt]>f_up)//частот, которые не нужны)
	       {nGbv[flt]=0;}
	      }
	  sprintf(str1,"c:%sFILTR\\%s.t%02d",path,Name_f,Nom_kol[0][yy]);
	  fltfile=fopen(str1,"wt");
	  if(fltfile==NULL){printf("Не могу открыть файл%35s\n",str1);}
	    printf("%35s\n",str1);
	  for(int dd=0;dd<Number;dd++)
	   {
	     double summary=0;//Значение амплитуды вибрации для текущего отсчета
	      for(int ddd=1;ddd<(Number>>1);ddd++)
	      {
	       if(nGbv[ddd]!=0)
	       {summary=nGbv[ddd]*cos(2*M_PI*nGbm[ddd]*(dd/Chastota)+argum[ddd])+summary;}
	      }
	       fprintf(fltfile,"%9.4f \t",(float)dd/Chastota);
	       fprintf(fltfile,"%9.4f \n",(float)summary+(-nGbv[0]/2));
	   }
	   fclose(fltfile);
	 }
       }
	 farfree(nGbm);
	 farfree(nGbv);
	 farfree(argum);
     }         
     for(q=0;q<2;q++)
     free (Nom_kol[q]);
     free (Nom_kol);
}
//-------------------------------------------------------------------------------

       int obr_f_dan(void)
       {
        int c;
        int ot=0;        //Флаг символа табуляции
        int on=0;        //Флаг символа конца строки
        int kav=0;       //Флаг символа кавычек
        int fldv=0;      //Флаг символа двоеточия
        char pred[100];
        char prom[100];
        char t[2];
       sprintf(str1,"%s",f_ust);       //  C:\\TC\\WORK2\\
      datfile=fopen(str1,"rt");  //Открытие установочного файла
      if(datfile==NULL)
	    {printf("Не могу открыть файл%35s\n",str1);return 0;}
      char* df=NULL;

      c=0;
      for(int tf=0;tf<100;tf++)
     {
   do{
	 strcpy(pred,"");
         fldv=0;    //флаг по двоеточию сброшен
      do {
          df=fgets(t,2,datfile);
	    ot=stricmp(df,"\t"); //    Сравнить на наличие символа табуляции
	    on=stricmp(df,"\n"); //    Сравнить на наличие символа перевода строки
	    kav=stricmp(df,"\:");
	    if(kav==0) {fldv=1;}
             if (df==NULL) break; 
	   if (fldv!=0 && on!=0 && kav!=0) { strcat(pred,t);}
	   if (fldv!=0) strcpy(prom,pred);
	   if(kav==0) {c=c+1;}
	 }  while (ot!=0 && on!=0); // Делать пока не табуляция или пока не перевод строки
	  
	     switch(c)
	     {
	 
	case 1: strcpy(Name_f,prom);		 break;
	case 2: strcpy(chans,prom);	 	 break;
	case 3: strcpy(frec,prom);               break;
	case 4: strcpy(size,prom);	         break;
	case 5: strcpy(path,prom); 	 	 break;
	case 6: strcpy(flagVib,prom); 	 	 break;
	case 7: strcpy(flagPok,prom); 	 	 break;
	case 8: strcpy(flagVrem,prom); 	 	 break;
	case 9: strcpy(flagUdpost,prom); 	 break;
	case 10: strcpy(flagBl_f,prom); 	 break;
	case 11: strcpy(flagDat_vr,prom); 	 break;
	case 12: strcpy(Nom_nab,prom); 	         break;
	case 13: strcpy(flagFour,prom); 	 break;
	case 14: strcpy(flagFiltr,prom); 	 break;
	case 15: strcpy(Nig_f,prom); 	         break;
	case 16: strcpy(Verh_f,prom); 	         break;
	default: break;
	     }
	   
        if (df==NULL) break;
	
      }  while (on!=0);
        if (df==NULL) break; 
     }
      if(stricmp(flagFour,"Y")==0) //Если установлен флаг преобразования
	    {                            //Фурье то соответствующие флаги 
		strcpy(flagVib,"Y"); 	 //устанавливаются или сбрасываются	
	        strcpy(flagPok,"N"); 	 	 
		strcpy(flagVrem,"Y"); 	 	 
	        strcpy(flagUdpost,"Y"); 	 
	        strcpy(flagBl_f,"Y"); 	         
		strcpy(flagDat_vr,"N"); 	 
            }	
     fclose(datfile);
      return 1;
       } //КОНЕЦ ФУНКЦИИ obr_f_dan
//-------------------------------------------------------------------------

     void kol_kan(char *strok, int **mas1)
     {
     char odsim[2];
     odsim[0]='\0';
     odsim[1]='\0';
     for(int tf=0;tf<fl;tf++)
     {
      memcpy(odsim,&strok[tf],1);      //Преобразование строки с номерами
      sscanf(odsim,"%x",&mas1[0][tf]); //каналов в десятичные числа и 
      strset(odsim,'\0');              //сохранение их в массиве mas1
     }
        int vrNom=0;
         for(tf=0;tf<fl;tf++)             //Заполнение второго столбца массива
         {                                //отвечающего за количество повторений  
          vrNom=mas1[0][tf];               //данного канала
           int schNom=0;
           for(int ff=tf;ff<fl;ff++)
	    {if (vrNom==mas1[0][ff]&&mas1[1][ff]==0)
		 {schNom=schNom+1;mas1[1][ff]=-1;}
            }
          mas1[1][tf]=schNom;
         }     
     //	 for(tf=0;tf<fl;tf++)
     //	 printf("%+d\n",mas1[1][tf]);
     }   //КОНЕЦ ФУНКЦИИ kol_kan
//---------------------------------------------------------------------
    void vrem_fun(int pozic, char* vnut_vrem)
    {    unsigned long b_time=gmt->tm_sec+(gmt->tm_min*60)+((unsigned long)gmt->tm_hour*(unsigned long)3600);
	 //b_time -Это время создания файла данных
          strset(vnut_vrem,NULL);
          unsigned long t_time=0; unsigned long hour=0; unsigned long mn=0; float sec=0;
	  float prom_t_time=((float)tc_poz+(float)pozic)/Chastota;  //Перевод времени из секунд в часы, минуты, секунды
	  t_time=prom_t_time;
	  int izb_pozic=(tc_poz+pozic)-(t_time*Chastota); //Нахождение дробной части
	  float dol_sec=izb_pozic/Chastota;      //секунд
          if(stricmp(flagVrem,"Y")!=0) t_time=t_time+b_time;//Целое кол-во секунд(вместе с текущ. временем)
	  hour=t_time/3600;   //кол-во часов
	  mn=(t_time-hour*3600)/60;  //кол-во минут
	  unsigned long c_sec=(t_time-3600*hour)-60*mn;//целое число секунд
	  sec=c_sec+dol_sec;       //Общее число секунд
          float ob_time=t_time+dol_sec;// Общее текущее время
	  float ob_vrem=0;    //Конечное время замера
	   if(stricmp(flagVrem,"Y")!=0) ob_vrem=(Number/Chastota)+b_time;
           else ob_vrem=Number/Chastota;
	  if(stricmp(flagVrem,"Y")!=0&&hour>=24)//Присвоение остатка отделения 
	  hour=hour-24*((int)(hour/24));
	  if(ob_vrem>60)
	       { sprintf(vnut_vrem,"%02ld:%02ld:%07.4f",hour,mn,sec);}
	  else {sprintf(vnut_vrem,"%07.4f",ob_time);}
    }

//--------------------------------------------------------
//   Быстрое преобразование Фурье
//--------------------------------------------------------
void S_Furie(int Num,float far *vn_vib,float far *vn_nGbm,float far *vn_nGbv,float far *vn_argum,float far *vn_aGv,float far *vn_aGm)
{
	int nMatr;
	unsigned int i;
	unsigned int j;
	unsigned int k;
	unsigned int m;
	unsigned int nSt;
	long int ni;
	long int ip;
  float Koeff;
	float nV;
	float nM;
	float nGtv;
	float nGtm;
	float dT =(float)1/Chastota;
	double SumKv;
        double arctan;
		Koeff=1.0;
     //	float huge aGv[Num];
     //	float huge aGm[Num];
	 
	nMatr=1;
	for(i=0;(Num>>i)!=1;i++)
		nMatr++;
	for(i=1;i<nMatr;i++)
	{
		nSt=(Num>>i);
		ip=0;
		for(j=0;j<(1<<(i-1));j++)
		{
			nV=cos((2*M_PI/(1<<i))*j);
			nM=sin((2*M_PI/(1<<i))*j);
			for(k=0;k<nSt;k++)
			{
				ni=2*nSt*j+k;
				if (i==1)
				{
				vn_aGv[ip]=Koeff*(vn_vib[ni]+vn_vib[ni+nSt]);
				vn_aGv[ip+nSt]=Koeff*(vn_vib[ni]-vn_vib[ni+nSt]);
				vn_aGm[ip]=0;
				vn_aGm[ip+nSt]=0;
				}
				else
				{
				nGtv=vn_aGv[ni]+nV*vn_aGv[ni+nSt]+nM*vn_aGm[ni+nSt];
				vn_nGbv[ip]=vn_aGv[ni]-nV*vn_aGv[ni+nSt]-nM*vn_aGm[ni+nSt];
				nGtm=vn_aGm[ni]+nV*vn_aGm[ni+nSt]-nM*vn_aGv[ni+nSt];
				vn_nGbm[ip]=vn_aGm[ni]-nV*vn_aGm[ni+nSt]+nM*vn_aGv[ni+nSt];
				vn_aGv[ip]=nGtv;
				vn_aGm[ip]=nGtm;
				}
				ip++;
			}
		}
		if (i!=1)
		{
			for(m=0;m<(Num>>1);m++)
			{
				vn_aGv[m+(Num>>1)]=vn_nGbv[m];
				vn_aGm[m+(Num>>1)]=vn_nGbm[m];
			}
		}
	}
	i=0;
	vn_nGbv[i]=vn_aGv[i]/Num;
	vn_nGbm[i]=0;
	for (i=1;i<(Num>>1);i++)
	{
		SumKv=sqrt((vn_aGv[i]/Num)*(vn_aGv[i]/Num)+(vn_aGm[i]/Num)*(vn_aGm[i]/Num));
		vn_nGbv[i]=2.0*(float)SumKv;
		vn_nGbm[i]=i/(dT*Num);
		arctan=atan(vn_aGm[i]/vn_aGv[i]);
		vn_argum[i]=(float)arctan;//*(180/M_PI);
		if(vn_aGv[i]<0){vn_argum[i]=vn_argum[i]+M_PI;}
		if(vn_argum[i]<0){vn_argum[i]=vn_argum[i]+(2*M_PI);}
	}

	return;
}